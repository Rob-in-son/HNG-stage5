#!/bin/bash

# Define functions for each information required

# Check if the script is running as root
# if [ "$(id -u)" != "0" ]; then
#   echo "This script requires root privileges. Please run with sudo or run as root"
#   exit 1
# fi

# ports
ports(){
    if [ -z "$1" ]; then
        echo "Active Ports and Services:"
        (echo "Port Protocol Service PID Command";
         sudo lsof -i -P -n | grep LISTEN | awk '{print $9, $1, $2}' | sed 's/://' | sort -n | while read port prog pid; do
             proto=$(echo $port | cut -d'(' -f2 | cut -d')' -f1)
             port=$(echo $port | cut -d'(' -f1)
             cmd=$(ps -p $pid -o comm= | head -1)
             echo "$port $proto $prog $pid $cmd"
         done) | column -t
    else
    #show specific details for a port
        echo "Details for port $1:"
        sudo lsof -i :$1 -P -n | column -t
    fi
}

# docker
docker_info(){
    if [ -z "$1" ]; then
        echo "Docker Images:"
        docker images | column -t
        echo
        echo "Docker Containers:"
        docker ps -a | column -t
    else
    #show specific details for container
        echo "Details for container $1:"
        docker inspect "$1" | jq '.[0] | {Name: .Name, State: .State, Mounts: .Mounts, NetworkSettings: .NetworkSettings}'
    fi
}

# Nginx
nginx(){
    if [ -z "$1" ]; then
        echo "Nginx Configurations:"
        (echo "Config_File        Domain                Port      Proxy";
         grep -H -r "server_name\|listen\|proxy_pass" /etc/nginx/sites-enabled/* |
         awk '
             BEGIN { FS = ":"; OFS = "\t" }  # Set field separator and output separator
             /server_name/ { split($0, a, ":") ; file=a[1]; domain=$3; gsub(/;/, "", domain) }
             /listen/ { split($0, a, ":") ; port=a[2]; gsub(/;/, "", port) }  # Extract only port number
             /proxy_pass/ { proxy=$3; gsub(/;/, "", proxy); print file, domain, port, proxy }
         ' | sort -u) | column -t
    else
        echo "Configuration for domain $1:"
        grep -H -r "server_name.*$1" /etc/nginx/sites-enabled/* |
        while IFS=: read -r file _; do
            echo "File: $file"
            sed -n '/server {/,/}/p' "$file"
        done
    fi
}

# Users
users(){
    if [ -z "$1" ]; then
        echo "Users and Last Login Times:"
        last | awk '!seen[$1]++ {print $1, $3, $4, $5, $6, $7}' | column -t
    else
    #show specific details of a user
        echo "Details for user $1:"
        id "$1"
        echo "Last login:"
        last "$1" | head -n 1
    fi
}

# Time range
time_range(){
    if [ -z "$1" ]; then
        echo "Error: No date provided. Usage: devopsfetch -t YYYY-MM-DD [YYYY-MM-DD]"
        return 1
    fi
    
    start_date=$1
    end_date=${2:-$start_date}
    
    echo "Activities from $start_date to $end_date:"
    journalctl --since "$start_date" --until "$end_date 23:59:59" | tail -n 50
}

# Help
help(){
    echo """Usage: devopsfetch [OPTIONS]
    Your devops tool for server information retrieval and monitoring
    Global Options: 
        -p  --port    Display all active ports and services
                      Use -p <port_number> to get detailed information about a specific port 
        -d  --docker  List all Docker images and containers 
                      Use -d <container_name> to get detailed information about a specific container
        -n  --nginx   Display all Nginx domains and their ports
                      Use -n <domain> to get detailed configuration information for a specific domain
        -u  --users   List all users and their last login times
                      Use -u <username> ls
                      to get detailed information about a specific user
        -t  --time    Display activities within a specified time range
        -h  --help    Provide usage instructions for the program"""
}

# Process options when the devopsfetch is called
case "$1" in
        -p|--ports) 
            ports "$2"
            ;;

        -d|--docker) 
            docker_info "$2"
            ;;

        -n|--nginx) 
            nginx "$2"
            ;;

        -u|--users)
            users "$2"
            ;;

        -t|--time) 
            time_range "$2" "$3"
            ;;
        
        -h|--help)
            help
        ;;

        *)
            echo "Invalid option. Use -h or --help for usage information."
            help
            exit 1
            ;;

esac
